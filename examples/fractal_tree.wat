aliases= [cos; math_cos; sin; math_sin; PI; math_PI; insert; dom_insert; canvas; dom_canvas; get_context; canvas_get_context; stroke; canvas_stroke; stroke_style; canvas_stroke_style; begin_path; canvas_begin_path; move_to; canvas_move_to; line_to; canvas_line_to; line_width; canvas_line_width; attributes; dom_set_attributes]; 
:= [width; 500; 
	height; 350]; 
|> [:= [root; dom_get_root []]; 
	insert [:= [my_canvas; |> [canvas []; 
				attributes [:: ["w"; width; "h"; height]]]]]]; 
:= [ctx; get_context [my_canvas; "2d"]]; 
:= [line; -> [x1; y1; x2; y2; 
		|> [ctx; 
			begin_path []; 
			stroke_style ["#fff"]; 
			line_width [1.7]; 
			move_to [x1; y1]; 
			line_to [x2; y2]; 
			stroke []]]]; 
:= [theta; 0.6; 
	step; 0.7; 
	angle; * [PI; 0.5]; 
	length; * [height; 0.25]; 
	level; 0; 
	max_level; 10; 
	x; * [width; 0.5]; 
	y; * [height; 1]; 
;; ARRAY FOR STACK OF TREE POSITIONS
 x_stack; 
	.: [max_level]; y_stack; 
	.: [max_level]]; 
:= [draw_branch; -> [dir; 
		: [
;; CALCULATE NEXT POINT
			:= [delta_x; * [length; 
					cos [angle]]; 
	delta_y; * [length; 
					sin [angle]]; 
	next_x; + [x; delta_x]; 
	next_y; - [y; delta_y]]; 
;; DRAW A SINGLE BRANCH!
			line [x; y; next_x; next_y]; 
			.:>= [x_stack; x]; 
			.:>= [y_stack; y]; 
			= [x; next_x]; 
			= [y; next_y]; 
			= [level; 
				+ [level; 1]]; 
			= [angle; 
				+ [angle; 
					* [theta; dir]]]; 
			= [length; 
				* [length; step]]; 
;; EXIT CONDITION OF RECURSION
			? [< [level; max_level]; 
				: [draw_branch [1]; 
					draw_branch [-1]]]; 
			= [angle; 
				- [angle; 
					* [theta; dir]]]; 
			= [length; 
				* [length; 
					/ [step]]]; 
			= [level; 
				- [level; 1]]; 
			= [x; 
				.:>!=. [x_stack]]; 
			= [y; 
				.:>!=. [y_stack]]]]]; 
draw_branch [0];

.: [
  .: [
    "How to make the array go brrr";
    "an array-like O(1) data-structure in JavaScript";
    "by Anthony Tonev";
    "@AT-290690.github.com"
  ];
  .: [
    "The array uses O(N) memory, has O(1) access, insertion, and deletion at its end. However, inserting and removing from the start is O(N).";
    "Unshift is slower than Push and Shift is slower than Pop because they also need to unshift/shift all the elements to the left once the first element is added. It grows with its input (linear growth).";
    "There are plenty of data structures — Linked Lists can delete and remove fast but access is O(N). Stacks and Queues can only be efficient on one end. Hash Tables are fast but they are memory hogs and don’t have indexing. Some trees are pretty fast most of the time but require a specific use case to be effective.";
    "The goal is to implement an array that has O(1) for access, insertions, and deletions, use as little memory as possible and be indistinguishable by the array in most situations.";
    "I will use JavaScipt and mimic its array implementation. Note that the JavaScript array implementation is that of a Dynamic Array which resizes the array a few times as items get inserted/deleted from it (known as an amortized constant).";
    "In the end, it should act just like an array except that it will be able to modify both the start and the end of a million items collection without breaking a sweat."
  ];
  .: [
   "How to achieve O(1) operations at the start? The answer lies in the question — Why is the array unshift and shift O(N)? Because it reorders its items every time it does unshift and shift.";
   "Conclusion — just don’t reorder things! Simply do everything at the end! Push and Pop are O(1) so we just have to use them instead."
  ];
.: [
  "There are 2 arrays needed - left branch and right branch. On the picture above left is red and right is blue. Operations at the start are done on the left one and those at the end on the right one. The left array has to be offsetted by 1 item for this because the left first item is the negative zero It is never used. It stays there as an offset.";
  "We can iterate from left and right like it's a signle array.";
  "On the picture above the left and right branches are merged. There are 5 items on the left nad 6 on the right. Left indexing is negative. Accessing is calculated (offset + offset left) where positive results are indexing the right branch and negative are indexing the left branch index 2 is the third item of branch right, index -2 is the third item of branch left. When zero index is calculated to be 0 then the item is the first element of the right branch. The left branch will have an unreachable value";
];

.: [
"Indexing is guaranteed without the need of reordering thanks to simple arithmetics:";
  "-  [Symbol(-0), 3, 2, 1, 0] // left";
  "+  [4, 5, 6, 7, 8]          // right";
  "[0] -> 0 - 4 = -4 => 0 // -";
  "[2] -> 2 - 4 = -2 => 2 // -";
  "[3] -> 3 - 4 = -1 -> 3 // -";
  "[4] -> 4 - 4 =  0 => 4 // +";
  "[5] -> 5 - 4 =  1 => 5 // +";
  "[6] -> 6 - 4 =  2 => 6 // +";
  "[7] -> 7 - 4 =  3 => 7 // +";
  "[8] -> 8 - 4 =  4 => 8 // +";
  "[0, 1, 2, 3, 4, 5, 6, 7, 8]"
];
.: [
  "The total size of the array is: left*-1 + right = -2*-1 + 5 = 7";
  "left will aways have empty value at index 0 since index 0 can’t be both a positive and a negative index.";
  "And finaly we have to balance the array from time to time. An array is considered balanced if left and right offsets are equal to each other. Balancing is required only if one branch has no items left to be removed. It will occur automatically when this happens. Balancing is O(N) but it happens so rarely if even that it is considered a O(1) amortized. The amount of balances that can occur on array are from none O(0) to worst case of O(log(N)).";
  "Below is the full implementation using JavaScript class"
];
.: [
  "Thats it. Check the repository for benchmarks, tests and extended api";
  "github.com/AT-290690/brrr";
  "Or try it yourself in the playground below:";
  "This bit is compressed in a link using";
  "hlp"
]
]
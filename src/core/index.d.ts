export interface Word {
  type: 'word'
  name: string
  args: (Apply | Value)[]
}
export type Classes = 'function' | 'string' | 'number'
export interface Value {
  type: 'value'
  value: unknown
  class: Classes
}
export interface Apply {
  operator: Word
  type: 'apply'
  args: Expression[]
}
export type Expression = Apply | Value | Word
export type Interpration = (args: Expression[], env: Expression) => unknown
export interface Parsed {
  expr: Expression
  rest: string
}

export type Token = "+"
|"-"
|"*"
|"/"
|"%"
|"|"
|"+="
|"-="
|"*="
|"~"
|"?"
|"!"
|"=="
|"!="
|">"
|"<"
|">="
|"<="
|"&&"
|"||"
|":"
|"==="
|"!=="
|":="
|"="
|"->"
|">>"
|"<<"
|".:"
|"::"
|"::.?"
|"::."
|"::.="
|"::.!="
|"'"
|".:."
|".:.="
|"..."
|"`"
|"|>"
|"!throw"
|"?=="
|"=>"
|"<-::"
|"<-.:"
|".:filter"
|".:reduce>>"
|".:reduce<<"
|".:map>>"
|".:flatten"
|".:map<<"
|".:difference"
|".:intersection"
|".:xor"
|".:union"
|".:quick_sort"
|".:merge_sort"
|".:group"
|".:rotate"
|".:flat"
|".:slice"
|"*loop"
|".:find_index>>"
|".:find_index<<"
|".:find>>"
|".:find<<"
|".:every"
|".:some"
|".:<"
|".:>"
|".:is_in_bounds"
|".:>="
|".:add_at"
|".:remove_from"
|".:<="
|".:>!="
|".:<!="
|".:>!=."
|".:<!=."
|"::entries"
|"::keys"
|"::values"
|".:seq"
|".:from_string"
|".:to_string"
|".:chunks"
|".:matrix"
|".:length"
|"::size"
|"~*"
|"void"
|"number"
|"string"
|"array"
|"object"
|"bit::make_bit"
|"bit::and"
|"bit::not"
|"bit::or"
|"bit::xor"
|"bit::left_shift"
|"bit::right_shift"
|"bit::un_right_shift"
|"math::factorial"
|"math::permutations"
|"math::permutations_array"
|"math::lerp"
|"math::abs"
|"math::mod"
|"math::clamp"
|"math::sqrt"
|"math::add"
|"math::sub"
|"math::mult"
|"math::pow"
|"math::pow2"
|"math::divide"
|"math::sign"
|"math::trunc"
|"math::exp"
|"math::floor"
|"math::round"
|"math::random"
|"math::random_int"
|"math::max"
|"math::min"
|"math::sin"
|"math::cos"
|"math::tan"
|"math::tanh"
|"math::atan"
|"math::atan2"
|"math::acos"
|"math::acosh"
|"math::asin"
|"math::asinh"
|"math::atanh"
|"math::hypot"
|"math::fround"
|"math::log10"
|"math::log2"
|"math::log"
|"math::sum"
|"math::MIN_INT"
|"math::MAX_INT"
|"math::infinity"
|"math::negative"
|"math::PI"
|"math::E"
|"math::LN10"
|"math::LOG10E"
|"math::SQRT1_2"
|"math::SQRT2"
|"math::parse_int"
|"math::number"
|"text::trim"
|"text::trim_start"
|"text::trim_end"
|"text::to_upper_case"
|"text::to_lower_case"
|"text::make_regexp"
|"text::match"
|"text::replace"
|"time::set_timeout"
|"time::set_interval"
|"time::set_animation"